[
  "constructor(address _owner, address _protocolFeeRecipient, address _transferManager, address _weth)",
  "error CallerInvalid()",
  "error ChainIdInvalid()",
  "error CreatorFeeBpTooHigh()",
  "error CurrencyInvalid()",
  "error ERC20TransferFromFail()",
  "error LengthsInvalid()",
  "error MerkleProofInvalid()",
  "error MerkleProofTooLarge(uint256 length)",
  "error NewGasLimitETHTransferTooLow()",
  "error NewProtocolFeeRecipientCannotBeNullAddress()",
  "error NoOngoingTransferInProgress()",
  "error NoSelectorForStrategy()",
  "error NoncesInvalid()",
  "error NotAContract()",
  "error NotAffiliateController()",
  "error NotOwner()",
  "error NotV2Strategy()",
  "error NullSignerAddress()",
  "error OutsideOfTimeRange()",
  "error PercentageTooHigh()",
  "error QuoteTypeInvalid()",
  "error ReentrancyFail()",
  "error RenouncementNotInProgress()",
  "error SameDomainSeparator()",
  "error SignatureEOAInvalid()",
  "error SignatureERC1271Invalid()",
  "error SignatureLengthInvalid(uint256 length)",
  "error SignatureParameterSInvalid()",
  "error SignatureParameterVInvalid(uint8 v)",
  "error StrategyHasNoSelector()",
  "error StrategyNotAvailable(uint256 strategyId)",
  "error StrategyNotUsed()",
  "error StrategyProtocolFeeTooHigh()",
  "error TransferAlreadyInProgress()",
  "error TransferNotInProgress()",
  "error WrongPotentialOwner()",
  "event AffiliatePayment(address affiliate, address currency, uint256 affiliateFee)",
  "event CancelOwnershipTransfer()",
  "event CurrencyStatusUpdated(address currency, bool isAllowed)",
  "event InitiateOwnershipRenouncement()",
  "event InitiateOwnershipTransfer(address previousOwner, address potentialOwner)",
  "event NewAffiliateController(address affiliateController)",
  "event NewAffiliateProgramStatus(bool isActive)",
  "event NewAffiliateRate(address affiliate, uint256 rate)",
  "event NewBidAskNonces(address user, uint256 bidNonce, uint256 askNonce)",
  "event NewCreatorFeeManager(address creatorFeeManager)",
  "event NewDomainSeparator()",
  "event NewGasLimitETHTransfer(uint256 gasLimitETHTransfer)",
  "event NewMaxCreatorFeeBp(uint256 maxCreatorFeeBp)",
  "event NewOwner(address newOwner)",
  "event NewProtocolFeeRecipient(address protocolFeeRecipient)",
  "event NewStrategy(uint256 strategyId, uint16 standardProtocolFeeBp, uint16 minTotalFeeBp, uint16 maxProtocolFeeBp, bytes4 selector, bool isMakerBid, address implementation)",
  "event OrderNoncesCancelled(address user, uint256[] orderNonces)",
  "event StrategyUpdated(uint256 strategyId, bool isActive, uint16 standardProtocolFeeBp, uint16 minTotalFeeBp)",
  "event SubsetNoncesCancelled(address user, uint256[] subsetNonces)",
  "event TakerAsk(tuple(bytes32 orderHash, uint256 orderNonce, bool isNonceInvalidated) nonceInvalidationParameters, address askUser, address bidUser, uint256 strategyId, address currency, address collection, uint256[] itemIds, uint256[] amounts, address[2] feeRecipients, uint256[3] feeAmounts)",
  "event TakerBid(tuple(bytes32 orderHash, uint256 orderNonce, bool isNonceInvalidated) nonceInvalidationParameters, address bidUser, address bidRecipient, uint256 strategyId, address currency, address collection, uint256[] itemIds, uint256[] amounts, address[2] feeRecipients, uint256[3] feeAmounts)",
  "function MAGIC_VALUE_ORDER_NONCE_EXECUTED() view returns (bytes32)",
  "function WETH() view returns (address)",
  "function addStrategy(uint16 standardProtocolFeeBp, uint16 minTotalFeeBp, uint16 maxProtocolFeeBp, bytes4 selector, bool isMakerBid, address implementation)",
  "function affiliateController() view returns (address)",
  "function affiliateRates(address) view returns (uint256)",
  "function cancelOrderNonces(uint256[] orderNonces)",
  "function cancelOwnershipTransfer()",
  "function cancelSubsetNonces(uint256[] subsetNonces)",
  "function chainId() view returns (uint256)",
  "function confirmOwnershipRenouncement()",
  "function confirmOwnershipTransfer()",
  "function creatorFeeManager() view returns (address)",
  "function domainSeparator() view returns (bytes32)",
  "function executeMultipleTakerBids(tuple(address recipient, bytes additionalParameters)[] takerBids, tuple(uint8 quoteType, uint256 globalNonce, uint256 subsetNonce, uint256 orderNonce, uint256 strategyId, uint8 collectionType, address collection, address currency, address signer, uint256 startTime, uint256 endTime, uint256 price, uint256[] itemIds, uint256[] amounts, bytes additionalParameters)[] makerAsks, bytes[] makerSignatures, tuple(bytes32 root, tuple(bytes32 value, uint8 position)[] proof)[] merkleTrees, address affiliate, bool isAtomic) payable",
  "function executeTakerAsk(tuple(address recipient, bytes additionalParameters) takerAsk, tuple(uint8 quoteType, uint256 globalNonce, uint256 subsetNonce, uint256 orderNonce, uint256 strategyId, uint8 collectionType, address collection, address currency, address signer, uint256 startTime, uint256 endTime, uint256 price, uint256[] itemIds, uint256[] amounts, bytes additionalParameters) makerBid, bytes makerSignature, tuple(bytes32 root, tuple(bytes32 value, uint8 position)[] proof) merkleTree, address affiliate)",
  "function executeTakerBid(tuple(address recipient, bytes additionalParameters) takerBid, tuple(uint8 quoteType, uint256 globalNonce, uint256 subsetNonce, uint256 orderNonce, uint256 strategyId, uint8 collectionType, address collection, address currency, address signer, uint256 startTime, uint256 endTime, uint256 price, uint256[] itemIds, uint256[] amounts, bytes additionalParameters) makerAsk, bytes makerSignature, tuple(bytes32 root, tuple(bytes32 value, uint8 position)[] proof) merkleTree, address affiliate) payable",
  "function hashBatchOrder(bytes32 root, uint256 proofLength) pure returns (bytes32 batchOrderHash)",
  "function incrementBidAskNonces(bool bid, bool ask)",
  "function initiateOwnershipRenouncement()",
  "function initiateOwnershipTransfer(address newPotentialOwner)",
  "function isAffiliateProgramActive() view returns (bool)",
  "function isCurrencyAllowed(address) view returns (bool)",
  "function maxCreatorFeeBp() view returns (uint16)",
  "function owner() view returns (address)",
  "function ownershipStatus() view returns (uint8)",
  "function potentialOwner() view returns (address)",
  "function protocolFeeRecipient() view returns (address)",
  "function restrictedExecuteTakerBid(tuple(address recipient, bytes additionalParameters) takerBid, tuple(uint8 quoteType, uint256 globalNonce, uint256 subsetNonce, uint256 orderNonce, uint256 strategyId, uint8 collectionType, address collection, address currency, address signer, uint256 startTime, uint256 endTime, uint256 price, uint256[] itemIds, uint256[] amounts, bytes additionalParameters) makerAsk, address sender, bytes32 orderHash) returns (uint256 protocolFeeAmount)",
  "function strategyInfo(uint256) view returns (bool isActive, uint16 standardProtocolFeeBp, uint16 minTotalFeeBp, uint16 maxProtocolFeeBp, bytes4 selector, bool isMakerBid, address implementation)",
  "function transferManager() view returns (address)",
  "function updateAffiliateController(address newAffiliateController)",
  "function updateAffiliateProgramStatus(bool isActive)",
  "function updateAffiliateRate(address affiliate, uint256 bp)",
  "function updateCreatorFeeManager(address newCreatorFeeManager)",
  "function updateCurrencyStatus(address currency, bool isAllowed)",
  "function updateDomainSeparator()",
  "function updateETHGasLimitForTransfer(uint256 newGasLimitETHTransfer)",
  "function updateMaxCreatorFeeBp(uint16 newMaxCreatorFeeBp)",
  "function updateProtocolFeeRecipient(address newProtocolFeeRecipient)",
  "function updateStrategy(uint256 strategyId, bool isActive, uint16 newStandardProtocolFee, uint16 newMinTotalFee)",
  "function userBidAskNonces(address) view returns (uint256 bidNonce, uint256 askNonce)",
  "function userOrderNonce(address, uint256) view returns (bytes32)",
  "function userSubsetNonce(address, uint256) view returns (bool)"
]
