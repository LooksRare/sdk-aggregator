import { ethers } from "hardhat";
import { utils, constants } from "ethers";
import { expect } from "chai";
import { LooksRareAggregator } from "../LooksRareAggregator";
import getFixture from "./helpers/getFixture";
import { BAYC, PARALLEL } from "./fixtures/constants";
import { ItemType } from "@opensea/seaport-js/lib/constants";

describe("LooksRareAggregator class", () => {
  describe("transformSeaportListings", () => {
    it("transforms Seaport listings into TradeData for the aggregator (single collection)", async () => {
      const signers = await ethers.getSigners();
      const aggregator = new LooksRareAggregator(signers[0], 1);
      const tradeData = aggregator.transformSeaportListings([
        getFixture("Seaport", "bayc4560Order.json").protocol_data,
        getFixture("Seaport", "bayc6206Order.json").protocol_data,
      ]);

      expect(tradeData.proxy).to.equal(""); // TODO: add real address
      expect(tradeData.selector).to.equal("0x86012f2e");
      expect(tradeData.value).to.equal(utils.parseEther("151.7"));
      expect(tradeData.orders.length).to.equal(2);
      expect(tradeData.ordersExtraData.length).to.equal(2);

      const orderOne = tradeData.orders[0];
      expect(orderOne.signer).to.equal("0x6b957a2791f6e88c99ca0e58d866075430daf31d");
      expect(orderOne.collection).to.equal(BAYC);
      expect(orderOne.collectionType).to.equal(0);
      expect(orderOne.tokenIds).to.eql(["4560"]);
      expect(orderOne.amounts).to.eql(["1"]);
      expect(orderOne.price).to.equal(utils.parseEther("78"));
      expect(orderOne.currency).to.equal(constants.AddressZero);
      expect(orderOne.startTime).to.equal("1662869607");
      expect(orderOne.endTime).to.equal("1665461607");
      expect(orderOne.signature).to.equal(
        "0x013a6ac34675a24ea0f33f2c5171fdf41de9393c15e46a06b01ba99ddb9ecf17499269b52dd64e6b91ad960dd30f2799cf6b7ac2ca6695cf22e19a4897270de71b"
      );

      const orderTwo = tradeData.orders[1];
      expect(orderTwo.signer).to.equal("0x975a416559f1f8b879b4f51b97e86972f8d7f87e");
      expect(orderTwo.collection).to.equal(BAYC);
      expect(orderTwo.collectionType).to.equal(0);
      expect(orderTwo.tokenIds).to.eql(["6206"]);
      expect(orderTwo.amounts).to.eql(["1"]);
      expect(orderTwo.price).to.equal(utils.parseEther("73.7"));
      expect(orderTwo.currency).to.equal(constants.AddressZero);
      expect(orderTwo.startTime).to.equal("1662990995");
      expect(orderTwo.endTime).to.equal("1664300960");
      expect(orderTwo.signature).to.equal(
        "0xe9879e6d9d69bcf36cbc7e5cfcb9c5a64dcd00f9d79c69a900c3d95ab5d4db7e155f62bcd74f4e48bc9de95425cb34003ed03dc5705d18aeacfb4c523d957beb1b"
      );

      expect(tradeData.ordersExtraData[0]).to.equal(
        "0x0000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000002000000000000000000000000004c00500000ad104d7dbd00e3ae0a5c00560c00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000bcbf036db55be90000007b02230091a7ed01230072f7006a004d60a8d4e71d599b8104250f00000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000300000000000000000000000000000000000000000000000404581566c07200000000000000000000000000006b957a2791f6e88c99ca0e58d866075430daf31d0000000000000000000000000000000000000000000000001b0fcaab200300000000000000000000000000000000a26b00c1f0df003000390027140000faa7190000000000000000000000000000000000000000000000001b0fcaab20030000000000000000000000000000a858ddc0445d8131dac4d1de01f834ffcba52ef1"
      );

      expect(tradeData.ordersExtraData[1]).to.equal(
        "0x0000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000002000000000000000000000000004c00500000ad104d7dbd00e3ae0a5c00560c000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000009722c7fcbc5a5d0000007b02230091a7ed01230072f7006a004d60a8d4e71d599b8104250f000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000003000000000000000000000000000000000000000000000003cba73f8b6cf98000000000000000000000000000975a416559f1f8b879b4f51b97e86972f8d7f87e0000000000000000000000000000000000000000000000001991dffceea840000000000000000000000000000000a26b00c1f0df003000390027140000faa7190000000000000000000000000000000000000000000000001991dffceea84000000000000000000000000000a858ddc0445d8131dac4d1de01f834ffcba52ef1"
      );

      expect(tradeData.extraData).to.equal(
        "0x0000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000001600000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000e
      );
    });

    it("transforms Seaport listings into TradeData for the aggregator (multiple collections)", async () => {
      const signers = await ethers.getSigners();
      const aggregator = new LooksRareAggregator(signers[0], 1);
      const tradeData = aggregator.transformSeaportListings([
        getFixture("Seaport", "bayc4560Order.json").protocol_data,
        getFixture("Seaport", "parallel10328Order.json").protocol_data,
      ]);

      expect(tradeData.proxy).to.equal(""); // TODO: add real address
      expect(tradeData.selector).to.equal("0x86012f2e");
      expect(tradeData.value).to.equal(utils.parseEther("78.0025"));
      expect(tradeData.orders.length).to.equal(2);
      expect(tradeData.ordersExtraData.length).to.equal(2);

      const orderOne = tradeData.orders[0];
      expect(orderOne.signer).to.equal("0x6b957a2791f6e88c99ca0e58d866075430daf31d");
      expect(orderOne.collection).to.equal(BAYC);
      expect(orderOne.collectionType).to.equal(0);
      expect(orderOne.tokenIds).to.eql(["4560"]);
      expect(orderOne.amounts).to.eql(["1"]);
      expect(orderOne.price).to.equal(utils.parseEther("78"));
      expect(orderOne.currency).to.equal(constants.AddressZero);
      expect(orderOne.startTime).to.equal("1662869607");
      expect(orderOne.endTime).to.equal("1665461607");
      expect(orderOne.signature).to.equal(
        "0x013a6ac34675a24ea0f33f2c5171fdf41de9393c15e46a06b01ba99ddb9ecf17499269b52dd64e6b91ad960dd30f2799cf6b7ac2ca6695cf22e19a4897270de71b"
      );

      const orderTwo = tradeData.orders[1];
      expect(orderTwo.signer).to.equal("0xc31047a053e1a9c1ba548792c9f3b6f619428986");
      expect(orderTwo.collection).to.equal(PARALLEL);
      expect(orderTwo.collectionType).to.equal(1);
      expect(orderTwo.tokenIds).to.eql(["10328"]);
      expect(orderTwo.amounts).to.eql(["1"]);
      expect(orderTwo.price).to.equal(utils.parseEther("0.0025"));
      expect(orderTwo.currency).to.equal(constants.AddressZero);
      expect(orderTwo.startTime).to.equal("1663268179");
      expect(orderTwo.endTime).to.equal("1665860179");
      expect(orderTwo.signature).to.equal(
        "0x8caa3054215c3dd214300377dde748af63ea1f7a084237920dcdb2b57779a7c325afcf97447229352ecf9448c34d04ea5ebd58e6f46981a165c10f57198b4e061c"
      );

      expect(tradeData.ordersExtraData[0]).to.equal(
        "0x0000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000002000000000000000000000000004c00500000ad104d7dbd00e3ae0a5c00560c00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000bcbf036db55be90000007b02230091a7ed01230072f7006a004d60a8d4e71d599b8104250f00000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000300000000000000000000000000000000000000000000000404581566c07200000000000000000000000000006b957a2791f6e88c99ca0e58d866075430daf31d0000000000000000000000000000000000000000000000001b0fcaab200300000000000000000000000000000000a26b00c1f0df003000390027140000faa7190000000000000000000000000000000000000000000000001b0fcaab20030000000000000000000000000000a858ddc0445d8131dac4d1de01f834ffcba52ef1"
      );

      expect(tradeData.ordersExtraData[1]).to.equal(
        "0x0000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000003000000000000000000000000004c00500000ad104d7dbd00e3ae0a5c00560c0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000071f1a2bb40c6200000007b02230091a7ed01230072f7006a004d60a8d4e71d599b8104250f0000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000030000000000000000000000000000000000000000000000000007c58508723800000000000000000000000000c31047a053e1a9c1ba548792c9f3b6f619428986000000000000000000000000000000000000000000000000000038d7ea4c68000000000000000000000000000000a26b00c1f0df003000390027140000faa7190000000000000000000000000000000000000000000000000000e35fa931a000000000000000000000000000157e23d3e68ac6f99334b8b0fe71f0eb844911dd"
      );

      expect(tradeData.extraData).to.equal(
        "0x0000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000001600000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000aa0000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000001a00000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000026000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000002"
      );
    });

    it("forbids orders with multiple consideration tokens", async () => {
      const signers = await ethers.getSigners();
      const aggregator = new LooksRareAggregator(signers[0], 1);
      const order = getFixture("Seaport", "bayc4560Order.json").protocol_data;
      order.parameters.consideration[1].token = "0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2";
      expect(() => {
        aggregator.transformSeaportListings([order]);
      }).to.throw("All consideration items must have the same currency!");
    });

    it("forbids orders with multiple offers", async () => {
      const signers = await ethers.getSigners();
      const aggregator = new LooksRareAggregator(signers[0], 1);
      const order = getFixture("Seaport", "bayc4560Order.json").protocol_data;
      order.parameters.offer.push(order.parameters.offer[0]);
      expect(() => {
        aggregator.transformSeaportListings([order]);
      }).to.throw("Only single offer item is supported!");
    });

    it("forbids offer items that is not ERC-721 nor ERC-1155", async () => {
      const signers = await ethers.getSigners();
      const aggregator = new LooksRareAggregator(signers[0], 1);
      const order = getFixture("Seaport", "bayc4560Order.json").protocol_data;
      order.parameters.offer[0].itemType = ItemType.ERC20;
      expect(() => {
        aggregator.transformSeaportListings([order]);
      }).to.throw("Seaport item type ERC20 is not supported!");
    });
  });
});
